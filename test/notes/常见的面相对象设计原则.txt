常见的面向对象设计原则
一·单一职责原则（srp）Single Responsibility Principle
	指的是一个类应该仅有一个引起它变化的原因；原因即职责；
	如果一个类有多个引起它变化的原因，意味着有多种职责，也就是把多种职责耦合在一起了；
	耦合在一起的职责会相互影响，这种设计是很脆弱的。
	运用中的难点：如何区分职责，什么算职责，职责的粒度等难以量化。
二·开放-关闭原则（ocp）
	指的是一个类应该对扩展开放，对修改关闭。一般被简称为开闭原则。
	开闭原则要求的是，类的行为是可以扩展的，而且是在不修改已有代码的情况下进行扩展的。
	实现开闭原则的关键就在于合理的抽象，分离出变换与不变的部分，为变化的部分预留下可扩展的方式，比如钩子方法或是动态组合对象
	运用中的难点：事实上，一个系统几乎不可能做到全部遵守开闭原则，也没有必要；适度的抽象可以提高系统的灵活性，使其可扩展，可维护，
	但过度的抽象，会增加系统的复杂程度；不可过度设计；
三·里氏替换原则（lsp）
	指的是子类必须能够替换掉它们的父类型，这是多态的一种体现，它可以避免在多态的应用中，出现某些隐蔽的错误。
	理论上当一个类继承了另一个类，那么子类就拥有了父类中可以继承的属性和操作，此时使用子类去替换父类应该不会出错
	但是如果子类型覆盖了父类型的某些方法或者修改了某些属性，那么在运行调用父类型方法时会发生错误。
	里氏替换原则是实现开闭的主要原则之一。开闭原则要求对扩展开放，扩展的一个实现手段就是使用继承；而里氏替换原则是保证子类型能够正确替换父类型，之后正确替换，才能实现扩展，否则扩展了也会出现错误；
四·依赖倒置原则（dip）
	指的是要依赖于抽象，不要依赖于具体类；依赖倒置应做到：
	1）高层模块不应该依赖于底层模块，二者应该都依赖于抽象
	2）抽象不应该依赖于具体实现，具体实现应该依赖于抽象
	高层模块一般包含对业务功能的处理和业务策略选择，应该被重用，是高层模块去影响底层模块的具体实现；
	因此，底层借口应该是由高层模块提出的，然后由底层实现的，也就是说底层接口的所有权在高层模块，也就是所有权倒置；
	倒置接口所有权：不要找我们，我们会联系你；
五·接口隔离原则（isp）
	指的是不应该强迫客户依赖于他们不用的方法；
	这个原则用来处理比较“庞大”的接口，这种借口通常会有比较多的操作说明，涉及到很多职责；客户在使用这样的接口时需要在一堆不需要的接口中寻找使用的，造成了接口的污染；
	因此这样的接口应该被分离，应该按照不同客户需要来分离成为针对客户的接口。
	分离接口的方式除了直接进行代码分离之外，还可以使用委托来分离接口，在能够支持多重继承的语言中，还可以采用多重继承的方式进行分离；
六·最少知识原则（lkp）
	指的是只和你的朋友谈话；
	在系统设计的时候，应该尽量减少对象之间的交互，对象只和自己的朋友谈话，也就是只和自己的朋友交互，从而松散类之间的耦合。
	通过松散类之间和耦合来降低类之间的依赖，这样在修改系统的某一部分的时候，就不会影响其他部分，从而使得系统具有更好的可维护性；
	那些对象被当做交朋友:
	1)当前对象本身
	2）通过方法的参数传递进来的对象
	3）当前对象所创建的对象
	4）当前对象的实例变量所引用的对象
	5）方法内所创建或实例化的对象
	总之：最少只是原则要求我们的方法调用必须保持在一定的界限范围之内，尽量减少对象的依赖关系；
七·其他原则
	1）面向接口编程
	2）优先使用组合，而非继承
	3）一个类需要的数据应该隐藏在类的内部
	4）类之间应该零耦合，或者只有传导耦合；换句话说，类之间要么没有关系，要么只使用另一个类的接口提供的操作；
	5）在水平方向上尽可能统一的分布系统功能
	--》）